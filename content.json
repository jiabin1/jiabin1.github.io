{"meta":{"title":"行路人","subtitle":"丰富善良真诚","description":"各自的朝圣路","author":"加冰","url":"http://yoursite.com"},"pages":[{"title":"","date":"2018-03-28T23:48:08.020Z","updated":"2018-03-13T10:52:11.263Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tomcat服务器搭建","slug":"tomcat服务器搭建","date":"2018-04-03T09:13:07.000Z","updated":"2018-04-03T09:20:42.504Z","comments":true,"path":"2018/04/03/tomcat服务器搭建/","link":"","permalink":"http://yoursite.com/2018/04/03/tomcat服务器搭建/","excerpt":"","text":"情况通过服务器的IP地址绑定的域名访问服务器，默认直接是80端口与或https加密的443。只要让tomcat监听80端口就能直接通过域名（无端口）的形式访问tomcat下的项目，而tomcat默认以非root用户启动，不能监听1024以下的端口。 措施 修改sever.conf文件 通过iptables进行端口转发 sudo iptables -t nat -A PREROUTING -p tcp –dport 80 -j REDIRECT –to-port 8080 https协议默认监听8443端口，故 sudo iptables -t nat -A PREROUTING -p tcp –dport 443 -j REDIRECT –to-port 8443","categories":[],"tags":[{"name":"遇过的坑","slug":"遇过的坑","permalink":"http://yoursite.com/tags/遇过的坑/"}]},{"title":"java九种基本数据类型和它们的包装类","slug":"java九种基本数据类型和它们的包装类","date":"2018-04-03T05:49:47.000Z","updated":"2018-04-03T06:39:33.180Z","comments":true,"path":"2018/04/03/java九种基本数据类型和它们的包装类/","link":"","permalink":"http://yoursite.com/2018/04/03/java九种基本数据类型和它们的包装类/","excerpt":"","text":"基本数据类型大小及默认值 - 基本数据类型 大小 默认值 包装类 整型 byte 1字节 (byte)0 Byte 整型 short 2字节 (short)0 Short 整型 int 4字节 0 Integer 整型 long 8字节 0L Long 浮点型 float 4字节 0.0f Float 浮点型 double 8字节 0.0d Double - void - - Void - boolean - false Boolean - char 2字节 /u0000(null) Character 基本数据类型作占储存空间不变是java具有可移植性的原因之一Java向面读对象语言靠近的过渡措施 类目 基本数据类型 包装类 传递 按值 按引用 存储 栈中按值存储创建 在堆中放引用 声明时 值类型自动分配数据空间 引用类型仅分配引用空间null需实例化分配数据空间方可赋值数据也是引用，复制仅是传递了引用 互转int —&gt; Integer int a = 0; Integer b = new Integer(a); //包装类的来由 赋予属性方法 Integer -&gt; int Integer a = new Integer(0);int b = a.intValue();","categories":[],"tags":[{"name":"文科生学Java","slug":"文科生学Java","permalink":"http://yoursite.com/tags/文科生学Java/"}]},{"title":"java面试提纲","slug":"java面试提纲","date":"2018-04-02T04:22:43.000Z","updated":"2018-04-03T05:49:17.434Z","comments":true,"path":"2018/04/02/java面试提纲/","link":"","permalink":"http://yoursite.com/2018/04/02/java面试提纲/","excerpt":"","text":"小知识点 九种基本数据类型的大小以及他们的封装类 equals 与 == 的区别 Object有哪些公用方法 Java的四种引用，强弱软虚，用到的场景 String、StringBuffer与StringBuilder的区别 Java面向对象的三个特征与含义 多态，Override和Overload的含义去区别 java多态的实现原理 Interface与abstract类的区别 Static class 与non static class的区别 Switch能否用string做参数 Hashcode的作用 集合 List(ArraryList, LinkedList, Vector) 三者区别联系源码 Set(HashSet, LinkedHashSet, TreeSet) 基于什么实现，内部数据结构，适用场景，源码 Map(HashMap, weakHashMap, LinkedHashMap, TreeMap) 内部实现原理，源码适用场景 Map、Set、List、Queue、Stack的特点与用法 HashMap和HashTable的区别 HashMap和ConcurrentHashMap的区别，HashMap的底层源码 TreeMap、HashMap、LindedHashMap的区别 Collection包结构，与Collections的区别 try catch finally，try里有return，finally还执行么 Excption与Error包结构。OOM你遇到过哪些情况，SOF你遇到过哪些情况 Java IO流 BIO（字符流字节流的类型及适用场景）NIO （类型、适用场景 三大组件的联系、使用内存情况） 反射的作用于原理 泛型常用特点，List能否转为List 解析XML的几种方式的原理与特点：DOM、SAX、PULL Java1.7与1.8新特性 JNI的使用 大数据挑一两个逐渐深入理解 （zookeeper kafka redis集群 storm hadoop spark solr cloud） ###异常 JVM Java类加载机制 类加载的五个过程：加载、验证、准备、解析、初始化 双亲委派模型：Bootstrap ClassLoader、Extension ClassLoader、ApplicationClassLoader 分派：静态分派与动态分派 对象创建方法，对象的内存分配，对象的访问定位 Java内存模型及分区，每个分区放什么 堆里的分区：Eden,survival from to, 老年代各自的特点 垃圾回收算法 GC的两种判定方法：引用计数与引用链 GC的三种收集方法：标记清除、标记整理、复制算法的原理与特点，分别用在什么地方，如果让你优化收集方法，有什么思路？ GC收集器有哪些？CMS收集器与G1收集器的特点 Minor GC与Full GC触发条件（分别在什么时候发生）？ 常用的内存调试工具：jmap、jstack、jconsole JVM优化 （可视化工具使用 日志查询 各项参数设置 四种引用） 线程 实现多线程的两种方法：Thread与Runable 多线程同步（写出生产者消费者，读者写者，哲学家就餐的java实现） 线程同步方法机制（voliate,synchronized,重入锁ReentrantLock，threadlocal），线程间通信（wait,notify） 锁的等级：方法锁、对象锁、类锁 ThreadLocal的设计理念与作用 ThreadPool用法与优势 ThreadPoolExecutor（重载方法的参数、各参数作用、源码） wait()和sleep()的区别 ####Concurrent并发包 ConcurrentHashMap的原理源码，与hashmap的区别 CopyOnWriteArrayList(set) 什么情况下加锁与不加锁，适用场景 ArrayBlockingQueue（Linked）两者区别，take、put、offer、poll方法原理、源码 AtomicInteger(long boolean) 功能 CountDownLatch，CyclicBarrier的功能场景 FutureTask (Callable) 源码 场景 ReentantLock 与syn的区别、好处、场景 Condition 与wait、notify的区别、好处 Semaphore 好处、场景 ReentrantReadWriteLock 读写分离的好处、适用场景、源码 Executors 线程池种类、各个作用、适用场景 设计模式（好处） 单例* 工厂* 适配器 责任链 观察者* 模仿方法 策略 装饰者 算法 foreach与正常for循环效率对比 直接插入排序 二分插入排序 希尔插入排序 冒泡排序 快排 选择排序 堆排序 归并排序 各种排序的思想 实现复杂度 稳定性 要求手写 数据库 三范式 主从复制 读写分离的原理及实现 事物类型，使用，可能引起的类型 数据引擎(InnoDB MylSAM) 区别联系 锁机制 适用场景 索引的类型 使用 什么样的字段适合索引 SQL优化 WEB Tomcat 结构 流程 源码 IO模型（同步、异步、阻塞、非阻塞概念；模型种类、各自特点、适用场景；使用方式） Servlet生命周期，三种实现方式 MyBatis的使用 #$的区别 一级二级缓存 TCP 三次握手、四次挥手、各种状态、状态改变 与UDP的区别 数据结构1.二叉树（平衡二叉树，二叉查找树，红黑树，完全二叉树，满二叉树）概念 适用场景 时间复杂度 好坏处1.B树（B+树，B-树）区别联系 适用场景 Linux 常用命令 管道符 查看日志相关命令 CPU使用命令","categories":[],"tags":[]},{"title":"真正的","slug":"真正的hello world","date":"2018-04-01T12:09:20.099Z","updated":"2018-04-01T12:09:20.099Z","comments":true,"path":"2018/04/01/真正的hello world/","link":"","permalink":"http://yoursite.com/2018/04/01/真正的hello world/","excerpt":"","text":"你好，世界 大标题二级标题三级标题标题前记得要加括号哦六级标题 引用哦连续两个空格加上回车这样就能实现段落引用换行 直接空一行行就能有重新启用一个引用块 无序列表1 无序列表2 无序列表3 无序列表4 一个 两个 三个 四个空格代码块 百度","categories":[],"tags":[]},{"title":"学习是一个熵减的过程","slug":"学习是一个熵减的过程","date":"2018-04-01T11:50:47.000Z","updated":"2018-04-01T11:58:40.102Z","comments":true,"path":"2018/04/01/学习是一个熵减的过程/","link":"","permalink":"http://yoursite.com/2018/04/01/学习是一个熵减的过程/","excerpt":"","text":"赋予结构，逐渐有序1$ hexo server","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://yoursite.com/tags/学习/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-01T11:50:05.105Z","updated":"2018-04-01T11:50:05.106Z","comments":true,"path":"2018/04/01/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}